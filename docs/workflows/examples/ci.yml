# CI/CD Workflow Template for AutoGen Code Review Bot
# Copy this file to .github/workflows/ci.yml to enable

name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'

jobs:
  # Code Quality and Security Checks
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
      
      - name: Code formatting check
        run: |
          ruff format --check src/ tests/
          echo "✅ Code formatting check passed"
      
      - name: Linting
        run: |
          ruff check src/ tests/
          echo "✅ Linting check passed"
      
      - name: Type checking
        run: |
          mypy src/ --strict --ignore-missing-imports
          echo "✅ Type checking passed"
      
      - name: Security scan
        run: |
          bandit -r src/ -f json -o security-report.json
          echo "✅ Security scan completed"
      
      - name: Secret detection
        run: |
          detect-secrets scan --baseline .secrets.baseline
          echo "✅ Secret detection passed"
      
      - name: Upload security artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            security-report.json
            .secrets.baseline
          retention-days: 30

  # Comprehensive Testing
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: quality
    
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev,monitoring]
      
      - name: Run unit tests
        run: |
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=html --cov-fail-under=95
          echo "✅ Unit tests passed with coverage"
      
      - name: Run integration tests
        run: |
          pytest tests/ -m integration -v
          echo "✅ Integration tests passed"
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: matrix.python-version == '3.11'
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Performance Testing
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
          pip install pytest-benchmark
      
      - name: Run performance benchmarks
        run: |
          pytest benchmarks/ --benchmark-only --benchmark-json=benchmark.json
          echo "✅ Performance benchmarks completed"
      
      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmark.json
          retention-days: 30
      
      - name: Performance regression check
        run: |
          python scripts/check_performance_regression.py benchmark.json || true
          echo "✅ Performance regression check completed"

  # Docker Build and Test
  docker:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build production image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: autogen-code-review-bot:ci
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            PYTHON_VERSION=${{ env.PYTHON_VERSION }}
      
      - name: Test Docker image
        run: |
          docker run --rm autogen-code-review-bot:ci python -c "import autogen_code_review_bot; print('✅ Docker image test passed')"
      
      - name: Build development image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.dev
          push: false
          tags: autogen-code-review-bot:dev-ci
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Documentation Build
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install documentation dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mkdocs mkdocs-material mkdocs-mermaid2-plugin
      
      - name: Build documentation
        run: |
          mkdocs build --strict
          echo "✅ Documentation built successfully"
      
      - name: Deploy documentation (main branch only)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          mkdocs gh-deploy --force
          echo "✅ Documentation deployed"

  # Dependency Security Scan
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=pyproject.toml
      
      - name: Safety check
        run: |
          pip install safety
          safety check --json --output safety-report.json || true
          echo "✅ Safety check completed"
      
      - name: Upload dependency scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-scan-results
          path: |
            safety-report.json
          retention-days: 30

  # Final Status Check
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [quality, test, performance, docker, docs, dependency-scan]
    if: always()
    
    steps:
      - name: Check CI results
        run: |
          if [[ "${{ needs.quality.result }}" == "success" && 
                "${{ needs.test.result }}" == "success" && 
                "${{ needs.docker.result }}" == "success" && 
                "${{ needs.docs.result }}" == "success" ]]; then
            echo "✅ All CI checks passed successfully!"
            exit 0
          else
            echo "❌ Some CI checks failed"
            exit 1
          fi
      
      - name: Post summary
        if: always()
        run: |
          echo "## CI Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Quality: ${{ needs.quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Testing: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Performance: ${{ needs.performance.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Docker: ${{ needs.docker.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Documentation: ${{ needs.docs.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Dependencies: ${{ needs.dependency-scan.result }}" >> $GITHUB_STEP_SUMMARY