# Security Scanning Workflow Template for AutoGen Code Review Bot
# Copy this file to .github/workflows/security.yml to enable

name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Static Application Security Testing (SAST)
  sast:
    name: Static Security Analysis
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
      
      - name: Run Bandit security analysis
        run: |
          bandit -r src/ -f json -o bandit-report.json
          bandit -r src/ -f sarif -o bandit-report.sarif
        continue-on-error: true
      
      - name: Upload Bandit results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: bandit-report.sarif
          category: bandit
      
      - name: Run Semgrep security analysis
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/python
          generateSarif: "1"
        continue-on-error: true
      
      - name: Upload Semgrep results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep.sarif
          category: semgrep
      
      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          languages: python
          category: codeql
      
      - name: Upload security artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sast-reports
          path: |
            bandit-report.json
            bandit-report.sarif
            semgrep.sarif
          retention-days: 30

  # Dependency Security Scanning
  dependency-security:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety pip-audit
      
      - name: Generate requirements file
        run: |
          pip freeze > requirements-frozen.txt
      
      - name: Run Safety check
        run: |
          safety check --json --output safety-report.json
          safety check --output safety-report.txt
        continue-on-error: true
      
      - name: Run pip-audit
        run: |
          pip-audit --format=json --output=pip-audit-report.json
          pip-audit --format=cyclonedx-json --output=sbom.json
        continue-on-error: true
      
      - name: Run Snyk security scan
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --file=pyproject.toml --json --json-file-output=snyk-report.json
        continue-on-error: true
      
      - name: Check for high-severity vulnerabilities
        run: |
          echo "üîç Checking for high-severity vulnerabilities"
          
          # Check Safety results
          if [ -f safety-report.json ]; then
            high_severity=$(jq '[.[] | select(.severity == "high" or .severity == "critical")] | length' safety-report.json)
            if [ "$high_severity" -gt 0 ]; then
              echo "‚ùå Found $high_severity high/critical severity vulnerabilities"
              jq -r '.[] | select(.severity == "high" or .severity == "critical") | "- \(.package_name): \(.vulnerability)"' safety-report.json
              exit 1
            fi
          fi
          
          echo "‚úÖ No high-severity vulnerabilities found"
      
      - name: Upload dependency scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-scan-reports
          path: |
            safety-report.json
            safety-report.txt
            pip-audit-report.json
            snyk-report.json
            sbom.json
            requirements-frozen.txt
          retention-days: 30

  # Secret Scanning
  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install detect-secrets
        run: |
          pip install detect-secrets
      
      - name: Create secrets baseline
        run: |
          detect-secrets scan --all-files --baseline .secrets.baseline.tmp
      
      - name: Compare with existing baseline
        run: |
          if [ -f .secrets.baseline ]; then
            detect-secrets audit --baseline .secrets.baseline.tmp
            if ! detect-secrets --version || ! diff .secrets.baseline .secrets.baseline.tmp > /dev/null; then
              echo "‚ùå New secrets detected or baseline outdated!"
              echo "Please review and update the secrets baseline if these are false positives"
              detect-secrets scan --baseline .secrets.baseline.tmp --all-files
              exit 1
            fi
          else
            echo "‚ö†Ô∏è No existing secrets baseline found, creating new one"
            mv .secrets.baseline.tmp .secrets.baseline
          fi
          
          echo "‚úÖ No new secrets detected"
      
      - name: Run TruffleHog secret scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified
      
      - name: Upload secret scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: secret-scan-results
          path: |
            .secrets.baseline*
          retention-days: 30

  # Container Security Scanning
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Build Docker image
        run: |
          docker build -t autogen-security-scan:latest .
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'autogen-security-scan:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy'
      
      - name: Run Docker Scout
        if: github.event_name == 'pull_request'
        uses: docker/scout-action@v1
        with:
          command: cves
          image: autogen-security-scan:latest
          only-severities: critical,high
          exit-code: true
      
      - name: Run Anchore Grype scanner
        uses: anchore/scan-action@v3
        with:
          image: autogen-security-scan:latest
          output-format: sarif
          output-file: grype-results.sarif
          severity-cutoff: medium
        continue-on-error: true
      
      - name: Upload Grype results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: grype-results.sarif
          category: grype
      
      - name: Upload container scan artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: container-scan-reports
          path: |
            trivy-results.sarif
            grype-results.sarif
          retention-days: 30

  # License Compliance Scanning
  license-scan:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pip-licenses
      
      - name: Generate license report
        run: |
          pip-licenses --format=json --output-file=licenses.json
          pip-licenses --format=csv --output-file=licenses.csv
          pip-licenses --format=html --output-file=licenses.html
      
      - name: Check for prohibited licenses
        run: |
          echo "üîç Checking for prohibited licenses"
          
          # Define prohibited licenses (customize as needed)
          prohibited_licenses=("GPL-3.0" "AGPL-3.0" "LGPL-3.0")
          
          for license in "${prohibited_licenses[@]}"; do
            if grep -q "$license" licenses.json; then
              echo "‚ùå Prohibited license found: $license"
              grep "$license" licenses.csv
              exit 1
            fi
          done
          
          echo "‚úÖ No prohibited licenses found"
      
      - name: Upload license reports
        uses: actions/upload-artifact@v4
        with:
          name: license-reports
          path: |
            licenses.json
            licenses.csv
            licenses.html
          retention-days: 90

  # Security Summary Report
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [sast, dependency-security, secret-scan, container-security, license-scan]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
      
      - name: Generate security summary
        run: |
          echo "# üîí Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # SAST Results
          echo "## Static Application Security Testing" >> $GITHUB_STEP_SUMMARY
          echo "Status: ${{ needs.sast.result }}" >> $GITHUB_STEP_SUMMARY
          
          # Dependency Security Results
          echo "## Dependency Security" >> $GITHUB_STEP_SUMMARY
          echo "Status: ${{ needs.dependency-security.result }}" >> $GITHUB_STEP_SUMMARY
          
          # Secret Scanning Results
          echo "## Secret Detection" >> $GITHUB_STEP_SUMMARY
          echo "Status: ${{ needs.secret-scan.result }}" >> $GITHUB_STEP_SUMMARY
          
          # Container Security Results
          echo "## Container Security" >> $GITHUB_STEP_SUMMARY
          echo "Status: ${{ needs.container-security.result }}" >> $GITHUB_STEP_SUMMARY
          
          # License Compliance Results
          echo "## License Compliance" >> $GITHUB_STEP_SUMMARY
          echo "Status: ${{ needs.license-scan.result }}" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìä Detailed reports are available in the workflow artifacts." >> $GITHUB_STEP_SUMMARY
      
      - name: Check overall security status
        run: |
          if [[ "${{ needs.sast.result }}" == "success" && 
                "${{ needs.dependency-security.result }}" == "success" && 
                "${{ needs.secret-scan.result }}" == "success" && 
                ("${{ needs.container-security.result }}" == "success" || "${{ needs.container-security.result }}" == "skipped") && 
                "${{ needs.license-scan.result }}" == "success" ]]; then
            echo "‚úÖ All security scans passed successfully!"
            exit 0
          else
            echo "‚ùå Some security scans failed or found issues"
            echo "Please review the detailed reports and address any security concerns"
            exit 1
          fi