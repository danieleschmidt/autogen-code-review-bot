version: '3.8'

services:
  # Main application
  autogen-bot:
    build: 
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: autogen-code-review-bot
    restart: unless-stopped
    ports:
      - "8000:8000"
      - "8080:8080"  # Metrics port
    environment:
      - APP_ENV=${APP_ENV:-development}
      - DEBUG=${DEBUG:-true}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - GITHUB_WEBHOOK_SECRET=${GITHUB_WEBHOOK_SECRET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/autogen_review
      - REDIS_URL=redis://redis:6379/0
      - CACHE_ENABLED=true
      - PARALLEL_PROCESSING=true
      - ENABLE_METRICS=true
    volumes:
      - ./logs:/app/logs
      - cache_data:/app/.cache
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - autogen-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: autogen-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=autogen_review
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - autogen-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: autogen-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - autogen-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: autogen-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - autogen-network

  # Grafana dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: autogen-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - autogen-network
    depends_on:
      - prometheus

  # Development tools (only in development)
  dev-tools:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    container_name: autogen-dev-tools
    profiles: ["dev"]
    volumes:
      - .:/app
      - cache_data:/app/.cache
    environment:
      - APP_ENV=development
      - DEBUG=true
    networks:
      - autogen-network
    command: tail -f /dev/null

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  cache_data:
    driver: local

networks:
  autogen-network:
    driver: bridge