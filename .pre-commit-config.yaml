repos:
  # Pre-commit hooks configuration for AutoGen Code Review Bot
  
  # Basic file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        description: Trims trailing whitespace
      - id: end-of-file-fixer
        description: Ensures files end with a newline
      - id: check-yaml
        description: Validates YAML syntax
      - id: check-toml
        description: Validates TOML syntax
      - id: check-json
        description: Validates JSON syntax
      - id: check-added-large-files
        description: Prevents large files from being committed
        args: ['--maxkb=1000']
      - id: check-merge-conflict
        description: Checks for merge conflict strings
      - id: check-case-conflict
        description: Checks for case conflicts
      - id: check-symlinks
        description: Checks for broken symlinks
      - id: check-executables-have-shebangs
        description: Ensures executables have shebangs
      - id: check-shebang-scripts-are-executable
        description: Ensures scripts with shebangs are executable
      - id: debug-statements
        description: Checks for debugger imports

  # Python code formatting and linting
  - repo: https://github.com/charliermarsh/ruff-pre-commit
    rev: v0.1.6
    hooks:
      - id: ruff
        name: ruff (linter)
        description: Run Ruff linter
        args: [--fix, --exit-non-zero-on-fix]
      - id: ruff-format
        name: ruff (formatter)
        description: Run Ruff formatter

  # Black formatter (backup/alternative to ruff format)
  - repo: https://github.com/psf/black
    rev: 23.11.0
    hooks:
      - id: black
        name: black
        description: Format Python code with Black
        language_version: python3

  # isort for import sorting
  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        name: isort
        description: Sort Python imports
        args: ["--profile", "black", "--filter-files"]

  # MyPy type checking
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.7.1
    hooks:
      - id: mypy
        name: mypy
        description: Run MyPy type checker
        additional_dependencies: [types-PyYAML, types-requests]
        args: [--config-file=pyproject.toml]

  # Security scanning
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        name: bandit
        description: Run Bandit security linter
        args: ['-c', 'pyproject.toml']
        additional_dependencies: ['bandit[toml]']

  # Secret detection
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        name: detect-secrets
        description: Detect secrets in codebase
        args: ['--baseline', '.secrets.baseline']
        exclude: |
          (?x)^(
              \.secrets\.baseline|
              tests/.*|
              .*\.lock|
              .*\.log
          )$

  # YAML linting
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.33.0
    hooks:
      - id: yamllint
        name: yamllint
        description: Lint YAML files
        args: [-c=.yamllint.yaml]

  # Markdown linting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.37.0
    hooks:
      - id: markdownlint
        name: markdownlint
        description: Lint Markdown files
        args: ['--fix']
        exclude: |
          (?x)^(
              CHANGELOG\.md|
              \.github/.*\.md
          )$

  # Shell script linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck
        name: shellcheck
        description: Lint shell scripts

  # Dockerfile linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        name: hadolint
        description: Lint Dockerfiles

  # Local hooks for project-specific checks
  - repo: local
    hooks:
      - id: pytest-check
        name: pytest-check
        description: Run tests
        entry: pytest
        language: system
        pass_filenames: false
        always_run: true
        args: ['-x', '--tb=short', '--quiet']
        
      - id: coverage-check
        name: coverage-check
        description: Check test coverage
        entry: pytest
        language: system
        pass_filenames: false
        always_run: true
        args: ['--cov=autogen_code_review_bot', '--cov-fail-under=80', '--quiet']
        
      - id: safety-check
        name: safety-check
        description: Check for known security vulnerabilities
        entry: safety
        language: system
        pass_filenames: false
        always_run: true
        args: ['check']
        
      - id: requirements-check
        name: requirements-check
        description: Check for dependency conflicts
        entry: pip
        language: system
        pass_filenames: false
        always_run: true
        args: ['check']

# Configuration for pre-commit.ci
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: [pytest-check, coverage-check, safety-check, requirements-check]
  submodules: false
