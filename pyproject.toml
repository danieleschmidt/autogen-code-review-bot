[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "autogen-code-review-bot"
version = "2.0.0"
description = "Two-agent code review bot using Microsoft AutoGen for automated PR critiques and code quality enhancement"
authors = [
    {name = "Terragon Labs", email = "support@terragonlabs.com"}
]
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Testing",
]
dependencies = [
    "pyautogen>=0.2.0",
    "requests>=2.25.0", 
    "pyyaml>=6.0",
    "gitpython>=3.1.0",
    "pygithub>=1.55",
    "click>=8.0.0",
    "rich>=12.0.0",
    "pydantic>=1.8.0",
    "cryptography>=3.4.0",
    "prometheus-client>=0.12.0",
    "opentelemetry-api>=1.12.0",
    "opentelemetry-sdk>=1.12.0",
    "structlog>=22.0.0",
    "tenacity>=8.0.0",
    "redis>=4.0.0",
    "numpy>=1.21.0",
    "scipy>=1.7.0",
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
    "plotly>=5.0.0",
    "pandas>=1.3.0",
    "joblib>=1.1.0",
    "scikit-learn>=1.0.0",
    "flask>=2.0.0",
    "gunicorn>=20.1.0",
    "uvicorn>=0.15.0",
    "fastapi>=0.70.0",
    "websockets>=10.0",
    "aioredis>=2.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.2.0",
    "pytest-cov>=3.0.0",
    "pytest-mock>=3.6.0",
    "pytest-asyncio>=0.18.0",
    "pre-commit>=2.15.0",
    "black>=22.0.0",
    "ruff>=0.0.200",
    "mypy>=0.910",
    "bandit[toml]>=1.7.0",
    "safety>=1.10.0",
    "detect-secrets>=1.2.0",
    "coverage[toml]>=6.0.0",
    "tox>=3.24.0",
    "sphinx>=4.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "locust>=2.0.0",
    "docker>=5.0.0",
    "kubernetes>=18.0.0",
]
enterprise = [
    "elasticsearch>=7.0.0",
    "kibana>=7.0.0", 
    "grafana-api>=1.0.0",
    "jaeger-client>=4.6.0",
    "consul-python>=1.1.0",
    "vault-python>=2.2.0",
    "aws-cli>=1.25.0",
    "azure-cli>=2.30.0",
    "google-cloud-cli>=0.9.0",
]
quantum = [
    "qiskit>=0.34.0",
    "cirq>=0.14.0",
    "pennylane>=0.23.0",
    "networkx>=2.6.0",
    "dask[complete]>=2021.0.0",
    "ray[serve]>=1.12.0",
]

[project.scripts]
autogen-review = "autogen_code_review_bot.cli:main"
quantum-planner = "autogen_code_review_bot.quantum_cli:main"

[project.urls]
Homepage = "https://github.com/terragonlabs/autogen-code-review-bot"
Documentation = "https://docs.terragonlabs.com/autogen-review-bot"
Repository = "https://github.com/terragonlabs/autogen-code-review-bot.git" 
Issues = "https://github.com/terragonlabs/autogen-code-review-bot/issues"
Changelog = "https://github.com/terragonlabs/autogen-code-review-bot/blob/main/CHANGELOG.md"

[tool.setuptools.packages.find]
where = ["src"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config --cov=src --cov-report=term-missing --cov-report=html --cov-report=xml --cov-fail-under=85"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests", 
    "e2e: marks tests as end-to-end tests",
    "security: marks tests as security tests",
    "performance: marks tests as performance tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/site-packages/*",
    "*/venv/*",
    "*/build/*",
    "*/dist/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "@abc.abstractmethod",
]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312'] 
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | migrations
)/
'''

[tool.ruff]
line-length = 88
target-version = "py38"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    ".eggs",
    "*.egg",
    "dist",
    "build",
    ".tox",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"test_*.py" = ["B011"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
exclude = [
    "build/",
    "dist/",
    ".venv/",
    "venv/",
    ".tox/",
]

[[tool.mypy.overrides]]
module = [
    "pyautogen.*",
    "git.*",
    "github.*", 
    "prometheus_client.*",
    "structlog.*",
    "tenacity.*",
    "redis.*",
    "numpy.*",
    "scipy.*",
    "matplotlib.*",
    "seaborn.*",
    "plotly.*",
    "pandas.*",
    "joblib.*",
    "sklearn.*",
    "qiskit.*",
    "cirq.*",
    "pennylane.*",
    "networkx.*",
    "dask.*",
    "ray.*",
]
ignore_missing_imports = true

[tool.bandit]
exclude_dirs = ["tests", "build", "dist", ".venv", "venv"]
skips = ["B101", "B601"]

[tool.bandit.assert_used]
skips = ["*_test.py", "test_*.py"]

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py38,py39,py310,py311,py312,lint,security,docs
isolated_build = true

[testenv]
deps = 
    pytest
    pytest-cov
    pytest-mock
    pytest-asyncio
commands = 
    pytest {posargs}

[testenv:lint]
deps = 
    black
    ruff
    mypy
commands = 
    black --check .
    ruff .
    mypy src

[testenv:security]
deps =
    bandit[toml]
    safety
    detect-secrets
commands =
    bandit -r src/
    safety check
    detect-secrets scan --all-files --baseline .secrets.baseline

[testenv:docs]
deps =
    sphinx
    sphinx-rtd-theme
commands =
    sphinx-build -b html docs/ docs/_build/html
"""