[build-system]
requires = ["setuptools>=61"]
build-backend = "setuptools.build_meta"

[project]
name = "autogen_code_review_bot"
version = "0.0.1"
requires-python = ">=3.8"
dependencies = [
    "PyYAML>=6.0.0,<7.0.0",
    "requests>=2.31.0,<3.0.0"
]

[project.optional-dependencies]
monitoring = [
    "psutil>=5.9.0,<8.0.0"
]
dev = [
    "pre-commit>=3.5.0,<5.0.0",
    "ruff>=0.1.0,<1.0.0",
    "bandit>=1.7.0,<2.0.0",
    "pytest>=7.4.0,<9.0.0",
    "pytest-cov>=4.1.0,<7.0.0",
    "pytest-xdist>=3.3.0,<4.0.0",
    "detect-secrets>=1.4.0,<2.0.0",
]

[tool.setuptools]
package-dir = {"" = "src"}
packages = [
    "autogen_code_review_bot",
    "autogen_review_bot",
]

# Development convenience scripts
[project.scripts]
bot = "autogen_code_review_bot.cli:main"
webhook = "autogen_code_review_bot.webhook:main"
review-pr = "autogen_code_review_bot.cli:review_pr"
setup-webhook = "autogen_code_review_bot.webhook:setup"
analyze-local = "autogen_code_review_bot.cli:analyze_local"

[tool.ruff]
target-version = "py38"
line-length = 88
extend-exclude = ["migrations", "venv", ".venv"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "S",   # bandit
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "S101",  # use of assert detected
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["S101", "S106", "S108"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=95",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.mypy]
python_version = "3.8"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]

[tool.bandit.assert_used]
skips = ["*_test.py", "*/test_*.py"]
